name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/gradle.lockfile') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./demo/gradlew

      - name: Build with Gradle
        run: ./gradlew build --no-daemon
        working-directory: ./demo

      - name: Prepare Docker context
        run: |
          mkdir -p docker-build
          cp demo/build/libs/*.jar docker-build/app.jar  # копируем JAR
          cp demo/Dockerfile docker-build/               # копируем Dockerfile

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: docker-build
          push: true
          tags: danilkhasanov/demo:latest
          file: docker-build/Dockerfile

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Setup Kubernetes tools
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.27.6'  # Укажите нужную версию

      - name: Configure Kubernetes
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config
          kubectl cluster-info    

      - name: Deploy to Dev
        if: github.ref == 'refs/heads/main'
        run: |
          # Проверяем/создаем namespace
          kubectl create namespace dev --dry-run=client -o yaml | kubectl apply -f -

          # Устанавливаем/обновляем релиз
          helm upgrade --install demo ./helm \
            --namespace dev \
            --create-namespace \
            --set image.repository=danilkhasanov/demo \
            --set image.tag=latest \
            --wait \
            --timeout 5m