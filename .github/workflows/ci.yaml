name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/gradle.lockfile') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./demo/gradlew

      - name: Build with Gradle
        run: ./gradlew build --no-daemon
        working-directory: ./demo

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -f demo/Dockerfile -t danilkhasanov/demo:${{ github.sha }} ./demo

      - name: Push Docker image
        run: |
          docker push danilkhasanov/demo:${{ github.sha }}

      - name: Setup Kubernetes config
        run: |
          # Создаем директорию .kube
          mkdir -p $HOME/.kube

          # Проверяем, что секрет содержит данные
          if [ -z "${{ secrets.KUBECONFIG_BASE64 }}" ]; then
            echo "ERROR: KUBECONFIG_BASE64 secret is empty!"
            exit 1
          fi

          # Декодируем и сохраняем kubeconfig
          echo "${{ secrets.KUBECONFIG_BASE64 }}" | base64 -d > $HOME/.kube/config

          # Проверяем, что файл не пустой
          if [ ! -s "$HOME/.kube/config" ]; then
            echo "ERROR: kubeconfig is empty after decoding!"
            exit 1
          fi

          # Выводим информацию о конфиге (без sensitive данных)
          echo "=== Kubeconfig summary ==="
          kubectl config view --minify --raw | grep -v 'certificate-authority-data:' | grep -v 'client-certificate-data:' | grep -v 'client-key-data:'
          echo "========================="

          # Устанавливаем правильные права
          chmod 600 $HOME/.kube/config

          # Проверяем доступные контексты
          echo "=== Available contexts ==="
          kubectl config get-contexts || true
          echo "========================="

          # Автоматически определяем контекст
          if ! CURRENT_CONTEXT=$(kubectl config current-context 2>/dev/null); then
            echo "No current context set, using first available context"
            CURRENT_CONTEXT=$(kubectl config view -o jsonpath='{.contexts[0].name}')
            if [ -z "$CURRENT_CONTEXT" ]; then
              echo "ERROR: No contexts found in kubeconfig!"
              exit 1
            fi
            kubectl config use-context "$CURRENT_CONTEXT"
          fi

          echo "Using context: $CURRENT_CONTEXT"

          # Проверяем подключение
          kubectl cluster-info
          kubectl get nodes

      - name: Configure Kubernetes access
        run: |
          # Проверяем доступные контексты
          echo "=== Available contexts ==="
          kubectl config get-contexts
          echo "========================="
          
          # Используем автоматически определенный контекст
          CURRENT_CONTEXT=$(kubectl config current-context)
          echo "Current context: $CURRENT_CONTEXT"
          
          # Проверяем подключение
          kubectl cluster-info
          kubectl get nodes

      - name: Deploy to Minikube (optional)
        if: github.ref == 'refs/heads/main'
        run: |
          helm upgrade --install demo ./helm \
            --kube-context=k3d-mycluster \
            --set image.repository=danilkhasanov/demo \
            --set image.tag=${{ github.sha }} \
            --namespace=default \
            --create-namespace \
            --debug
          # Можно добавить команды для деплоя через kubectl или helm, если нужно автоматизировать.